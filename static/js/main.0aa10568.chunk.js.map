{"version":3,"sources":["components/Header.js","mascotas/enviroments/enviroments.js","mascotas/services/mascota.js","mascotas/MascotasForm.js","mascotas/MascotasTabla.js","mascotas/Mascotas.js","App.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","placeholder","URL_BACKEND","getMascotas","a","axios","get","resultado","data","postMascota","objMascota","post","JSON","stringify","headers","deleteMascotaById","delete","respuesta","putMascota","put","mascota_id","formularioVacio","mascota_nombre","mascota_raza","mascota_tipo","mascota_edad","mascota_colores","mascota_activo","MascotasForm","traerMascotas","mascotaEditar","useState","formulario","setFormulario","modo","setModo","useEffect","console","log","handleChange","e","valor","target","checked","value","name","onSubmit","preventDefault","Swal","fire","title","text","icon","showCancelButton","then","isConfirmed","timer","status","position","showConfirmButton","htmlFor","onChange","MascotasTabla","mascotas","setMascotaEditar","columns","label","field","rows","map","m","defaultChecked","estado","rpta","acciones","onClick","striped","responsive","bordered","hover","Mascotas","setMascotas","setmascotaEditar","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0aa10568.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\"href=\"!#\">MASCOTAS</a>\r\n            <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n            <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"!#\">Link</a>\r\n                    </li>\r\n                    <li className=\"nav-item dropdown\">\r\n                        <a className=\"nav-link dropdown-toggle\" href=\"!#\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                            <a className=\"dropdown-item\" href=\"!#\">Action 1</a>\r\n                            <a className=\"dropdown-item\" href=\"!#\">Action 2</a>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n                <form className=\"form-inline my-2 my-lg-0\">\r\n                    <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\"/> \r\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n//pas 70 por defecto cuando use el emmet de navbar, me pone el input sin el cierre /    \r\n//a todos los class lo pasamos a classname y a los href, le ponemos antes del # un !  . recordar para selecionar todo es con ctrl + d\r\n//e importamos en el app","//37 pegamos nuestra url de mock api\r\n\r\nexport const URL_BACKEND = \"https://5febca50573752001730ad7f.mockapi.io\";\r\n","//35 instalamos axios  npm install axios e importamos\r\n//36 para nuestra url creamos la carpeta enviroments\r\n//38 seguimos en la funcion getmascotas con el await. esta funcion nos va a servir para usar el get de nuestra url\r\n\r\nimport axios from \"axios\";\r\nimport { URL_BACKEND } from \"../enviroments/enviroments\";\r\n\r\n\r\nexport const getMascotas = async () => {\r\n  const resultado = await axios.get(`${URL_BACKEND}/mascota`);\r\n  return resultado.data;\r\n};\r\n\r\n//45  cuando es post se envia de diferente forma(esto esta en una clase anterior), recibo un objmasc como parametro, en post como 2 param. lo envio como json stringify al obj, y el 3 entre {} va el headers \r\nexport const postMascota = async (objMascota)=>{\r\n    //esto hubiera sido en version fetch y no axios.. este codigo es la misma peticion sin usar axios\r\n    // const peticion = await fetch(`${URL_BACKEND}/mascota`,{\r\n    //     method: \"POST\",\r\n    //     body: JSON.stringify(objMascota),\r\n    //     headers:{\r\n    //         \"Content-type\": \"application/json\"\r\n    //     }\r\n    // });\r\n    //const data = peticion.json()\r\n    \r\n    const resultado = await axios.post(`${URL_BACKEND}/mascota`, \r\n    JSON.stringify(objMascota),{\r\n    headers:{\r\n        \"Content-type\":\"application/json\"\r\n    }\r\n    })\r\n    return resultado.data;  //y vamos al form masc\r\n}\r\n\r\n\r\n//pas56.1 exportamos esta funcion. pero cuando es delete siempre nos pide el id \r\nexport const deleteMascotaById = async (id)=>{\r\n const respuesta = await axios.delete(`${URL_BACKEND}/mascota/${id}`);\r\n return respuesta.data;\r\n\r\n//  version fetch\r\n//  const peticion = await fetch(`${URL_BACKEND}/mascota/${id}`, { method:\"DELETE\"})\r\n//  const json = await peticion.json();\r\n//  return json\r\n}\r\n\r\n//pas62 recibo el objmascota. el put tambien te pide el id, el 2 parametro va a ser la nueva data en version stringify, y el headers\r\nexport const putMascota = async (objMascota)=>{\r\n  const respuesta= await axios.put(`${URL_BACKEND}/mascota/${objMascota.mascota_id}`, \r\n  JSON.stringify(objMascota), //nota es mejor enviar todos los atributos del objmascota con el activo actualizado, en vez de solo mandar mascota_activo:algo ,ya que se podria crear otro objeto \r\n  {\r\n    headers:{\r\n    \"Content-type\":\"Application/json\"\r\n  }\r\n});\r\nreturn respuesta;  //paso62.1 investigar la pagina petstore.swagger.io,tambien colocar solo return respuesta sin el .data porque necesito sus otros atributos\r\n};\r\n//pas 56.2 NOta: en mockapi se puede usar la busqueda, se pone: https://5febca50573752001730ad7f.mockapi.io  /mascota?mascota_nombre=f    esa f es para buscar\r\n//mockapi.io/docs   luego vamos al boton eliminar","//pas23 llenamos nuestro return con un formulario de acuerdo a nuestro mockapi mascotas   . emmet :.form-group.col-md-6*6>label+input.form-control\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport { postMascota, putMascota } from \"./services/mascota\";\r\n//pas25 creamos un usestate  con un var. de estado inicial de un obj\r\n//tambien en nuestros inputs le ponemos name, tiene que coincidir con lo que hemos puesto en el objeto inicial, un value y el handlechange(le crearemos en una funcion)\r\n\r\n//30 lo coloco afuera porque se inicia una vez. si estaba adentro se iniciaba varias veces. en nuestro mockapi hacemos unos arreglos.le agregamos mascota_ para que coincida con el backend\r\nconst formularioVacio = {\r\n  mascota_nombre:\"\",\r\n  mascota_raza: 0, //le ponemos 0 porque va hacer un id\r\n  mascota_tipo: 0,  //si le ponemos 1 va a salir lo que tenemos en el input osea va a coincidir con el value\r\n  mascota_edad:0,\r\n  mascota_colores: \"\",\r\n  mascota_activo: false,\r\n  }\r\n\r\n//ps 48 recibimos la prop\r\nconst MascotasForm = ({traerMascotas,mascotaEditar}) => {\r\n  const [formulario, setFormulario] = useState(formularioVacio); //30 antes estaba en el usestate el objeto de formulariovacio.30.1 lo reemplazamos con el formulariovacio\r\n  //43 creo la var.de estado modo      a mi form le añando el onsubmit con la func handlesubmit\r\nconst [modo, setModo] = useState(\"crear\");\r\n  \r\n//44 creo esta funcion para el form\r\nconst handleSubmit=(e)=>{\r\ne.preventDefault();\r\nif(modo === \"crear\"){  //al dar en crear o enter se pregunta si nuestro var. de estado esta en crear. nos sale una alerta.    nuestro modo siempre esta en modo crear, hasta que lo seteemos otro valor en algun punto\r\n  Swal.fire({            //importamos el sweetalert\r\n    title: \"¿Registrar mascota?\",\r\n    text: \"Se guardara en la base de datos\",\r\n    icon: \"question\",\r\n    showCancelButton: true,\r\n  }).then(({isConfirmed})=>{   //se pone .then para recibir la respuesta. esto se pone porque la doc. de sweetalert es asi. y tiene entre sus objetos el atributo is confirmed(esto lo necesitamos porque esto tiene el false o true)\r\n  if(isConfirmed){  //si isconfirmed es true\r\n    //crear el registro de la mascota  vamos el service - mascota\r\n    postMascota(formulario).then((data) =>{   //pas.46 llamamos al postmas e import. y se envia como param el formulario que es un obj. se pone .then porque elpostmascota es uns promesa y recibimos la data(este seria la respuesta de la promesa. o el dato al que le has hecho el cambio, en este caso es el obj que has posteado),una vez teniendo la data,le decimos que hacer con ella\r\n      // console.log(data);  este es un objeto\r\n      if(data.mascota_id){  //si data.mascota.id existe entonces se crea una alerta. luego vamos al mascotas.js   //creooooo. que cuando hacemos el postmascota , automaticamente este le crea un id.ya que al comienzo le envio el formulario sin el id\r\n       traerMascotas(); //ps48.1 llamamos a la funcion y se actualizara la tabla\r\n        setFormulario(formularioVacio);  //ps48.2 es para limpiar mi formulario. como hemos creado un formulario vacio afuera, usaremos eso.  ahora vamos al mascotas.js\r\n       Swal.fire({\r\n          title: \"Registrado!\",\r\n          text: \"Mascota registrada\",\r\n          icon: \"success\",\r\n          timer: 1500,\r\n        });\r\n      }\r\n    })             \r\n  }\r\n  })                        \r\n}else{  //pas69 si no estamos en el modo crear. osea asumimos que estamos en el modo editar\r\nSwal.fire({\r\n  title: \"¿Editar?\",\r\n  text: \"¿Seguro que desea registrar el registro de la mascota?\",\r\n  icon: \"question\",\r\n  showCancelButton: true,\r\n}).then(({isConfirmed})=>{\r\nif(isConfirmed){   //69.1 le envio al put el formulario(este ya tiene el id) que estoy editando en ese momento\r\n  putMascota({...formulario}).then((respuesta)=>{\r\n    if(respuesta.status === 200){\r\n      setFormulario(formularioVacio);  //despues de que sea verdadero el 200,seteo el formulariovacio\r\n      traerMascotas(); //aca traigo las mascotas, que es el get para actualizar la tabla\r\n      setModo(\"crear\"); //ahora mi modo va a ser el modo crear          //hay un error en el toggle. que cuando le doy a editar y lo guardo , el toggle no se cambia. ahora quremos subirlo a la nube, creamos un componente header\r\n      Swal.fire({\r\n        position:\"top-end\",\r\n        timer: 1000,\r\n        title: \"Registro actualizado\",\r\n        icon: \"success\",\r\n        showConfirmButton: false,\r\n      })\r\n    }\r\n  }) \r\n  \r\n}\r\n})\r\n}\r\n}\r\n// //paso 68 crea estos usefect para probar\r\n// useEffect(()=>{console.log(\"Use effect cuando cambio el formulario\");},[])\r\n// useEffect(()=>{console.log(\"Use effect cuando cambia el formulario\");},[formulario])\r\n//pas67 creo un usefect. tambien cuando inicia la pagina,siempre se ejecuta el useefect,pero como al comienzo el mascotaeditar es null ,no hace nada(osea no se cumple esa funcion y no la llama pero el log que tenia antes si se imprime porque no tiene una condicion). pero cuando le doy click al boton editar y lo envio como prop aca,no se va a actulizar el formulario porque el useefect ya se ejecuto una vez con el null\r\nuseEffect(()=>{\r\n  console.log(\"Use effect cuando cambia la mascotaEditar\");\r\nif(mascotaEditar !== null){    //si mascotaedit existe o es diferente de null entonces seteo a mi formulario esa mascotaeditar. recordar ,esa mascotaeditar va a existir cuando le hemos dado click al boton editar\r\n  setFormulario(mascotaEditar);\r\n  setModo(\"editar\") //pas 68.1 ahora quiero que mi boton del formulario, tenga  el nombre de editar.antes tenia un valor de estado. en modo crear. aca le estoy dando un nuevo valor.ahora voy a mi return para darle un cambio a mi boton de crear mascota\r\n}\r\n},[mascotaEditar]) //para que se ejecute otra vez, cada vez que cambie el mascotaeditar(osea cuando le doy clic a editar) se va a ejecutar lo de adentro de usefect y ahi recien va a poner los datos en el formulario\r\n\r\n\r\n   //33 inicio con la funcion handle\r\n   //34 comp. controlados son los input que dependen de una var. de estado es decir que cuando la var. de estado cambia el copm. lo hara .estos siempre tienen un value. si quieres usar un elementbyid , a tus inputs le borras el value y el onchange ,pones defaultValue con el valor que quieras\r\n   //y creo un comp mascotastabla\r\n   const handleChange = (e) => {\r\n   let valor = e.target.type === \"checkbox\"? e.target.checked: e.target.value; //33.1 cuando hago un cambio en mi input checbox retornara el checked(recordar que cuando es un check, no es value) si no lo es retorna el value(los otros tipos input tienen siempre el value)\r\n   setFormulario({\r\n     ...formulario,\r\n     [e.target.name]:valor,   //33.1 en la posicion de mi e...name va a ser la const valor de arriba\r\n   });\r\n   console.log(valor); \r\n   }\r\n//31 ahora hacemos cambios al name y al valuemascota_mascota_ para que sea = a nuestro valr de est\r\n//32 creamos despues de nuestro ultimo div otro .form-group.col-md-6*2>button   btn-block creo que se transformar en un elem. de bloque que ocupa todo su ancho.  type submit en cuando envia y el type button va ha ser un btn cualquiera\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-body\">\r\n            <form className=\"row\" onSubmit={handleSubmit}>\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"\">Nombre</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Ingrese nombre\"\r\n                  name=\"mascota_nombre\"\r\n                  onChange={handleChange}\r\n                  value={formulario.mascota_nombre}\r\n                />\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"\">Raza:</label>\r\n                <select className=\"form-control\" name=\"mascota_raza\" \r\n                value={formulario.mascota_raza}\r\n                onChange={handleChange}>\r\n                <option value=\"0\">Seleccione</option>\r\n                  <option value=\"1\">Bull Terrier</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"\">Colores:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"mascota_colores\"\r\n                  onChange={handleChange}\r\n                  value={formulario.mascota_colores}\r\n                  placeholder=\"Ingrese colores\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"\">Edad</label>\r\n                <input type=\"number\" className=\"form-control\"\r\n                name=\"mascota_edad\"\r\n                value={formulario.mascota_edad}\r\n                onChange={handleChange} />\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"\">Tipo</label>\r\n                <select className=\"form-control\"\r\n                value={formulario.mascota_tipo}\r\n                name=\"mascota_tipo\"\r\n                onChange={handleChange}>\r\n                    <option value=\"0\">Seleccione</option>\r\n                  <option value=\"1\">Perro</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n              <label htmlFor=\"\">¿Registro activo?</label>\r\n                <div className=\"input-group mb-3\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        //checked, es el campo analogo a value\r\n                        //y solo acepta valores booleanas (true/false)\r\n                        checked={formulario.mascota_activo}\r\n                        name=\"mascota_activo\"\r\n                        onChange={handleChange}\r\n                        aria-label=\"Checkbox for following text input\"\r\n                        id=\"checkActivo\"/>  \r\n                    </div>\r\n                  </div>\r\n                 <label htmlFor=\"checkActivo\" className=\"form-control\">Activo</label>\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <button className=\"btn btn-block btn-primary\" type=\"submit\">{modo===\"crear\"?\"Crear mascota\":\"Guardar cambios\"}</button> \r\n                </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <button className=\"btn btn-block btn-danger\" type=\"button\">Cancelar</button>\r\n                </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MascotasForm;\r\n//26 vinculamos con id el checkactivo en input y el htmlfor del label otro checkactivo\r\n\r\n//pas27 empieza el video 44 creo un comp. mascotas. luego vamos al app.js\r\n\r\n//68.2 si estoy en el modo crear que me retorne crear mascota si no el guardar cambios","//34.1  crear la tabla e importar en mascotas. luego creamos la carpeta services en la carpeta mascotas,con su archivo mascota\r\nimport React from \"react\";\r\n//pas52 importamos mdb y lo ponemos dentro del card body\r\nimport {MDBDataTable} from \"mdbreact\";\r\nimport { deleteMascotaById, putMascota } from \"./services/mascota\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"react-toggle/style.css\" //pas 60 importando lo que dice la doc. para nuestro toggle.entar en usage y ahi te sale otra importacion de toggle\r\nimport Toggle from \"react-toggle\"; //ahora quiero usar este toggle en mi row activo\r\n\r\nconst MascotasTabla = ({mascotas,traerMascotas,setMascotaEditar}) => {\r\n  \r\n  \r\n//pas57 le damos onclick al btn eliminar. llamo a esta funcion eliminar.. ahi y como param. ya que estoy en el map.y quiero saber solo el id. le envio el m.mascota_id\r\n  const eliminarMascotaPorId=(id)=>{\r\n  Swal.fire({\r\n    title: \"¿Eliminar?\",\r\n    icon: \"error\",\r\n    text: \"Los cambios seran irreversibles\",\r\n    showCancelButton : true,\r\n  }).then(({isConfirmed})=>{   //si le da en aceptar se ejecuta el deletemascota\r\n   if(isConfirmed){\r\n     deleteMascotaById(id).then((data)=>{ \r\n       // si la data tiene un atributo mascota_id, si se ha eliminado\r\n      if (data.mascota_id){  //me aseguro de que si se ha eliminado. luego vamos a mascotas.js\r\n        traerMascotas(); //58.1 llamo a traermascotas para que traiga de nuevo la lista de mascotas para actualizarlo\r\n        Swal.fire({\r\n          title: \"Eliminado!!\",\r\n          text: \"Registro eliminado satisfactoriamente\",\r\n          timer: 1500,\r\n          icon: \"success\",\r\n        });\r\n      }\r\n     }) \r\n   }\r\n  })  \r\n}\r\n  //pas61 creo la funcion. ahora en mi onchange ,no defrente llamo mi funcion ahi, porque no sabria a que toggle le estoy haciendo el evento.entonces llamo a esta funcion ahi, y le envio como param. el checked y una copia  del objeto que estoy iterando en ese momento.la copia es porque vamos a hacer un put\r\n//ahora esta funcion recibira un estado(sera false o true) y el obj que estaba iterando en ese momento.ahora vamos al service para crear un put\r\n  const handleChangeToggle=(estado,objMascota)=>{ //pas 63 ahora llamamos al putmasc  recordar el put es como cambiarlo por otro version actualizada\r\n   putMascota(        //como quiero cambiarlo, le envio una copia de mi objmascota y quiero actualizar del objeto, la mascota_activo, ahora su nuevo valor sera el estado. estado es el checked al que hice click(true o false)\r\n     {...objMascota,\r\n    mascota_activo: estado\r\n  }).then(rpta =>{  //recordar que es asyncrono por eso el then.quiero ver la rpta(promesa)\r\n  if(rpta.status === 200){ //si rpta.satus es 200. el 200 significa que es verdadero. el 400 es error. nota: con post se preguntaba si tenia un id y le daba la alerta pero como el put ya tiene un id, aca se pregunta por el status\r\n    Swal.fire({\r\n      position: \"top-end\",\r\n      icon: \"success\",\r\n      title: \"Registro actualizado\",\r\n      showConfirmButton: false,  //boton para confirmar que no aparezca\r\n      timer: 1000,\r\n    }); //ahora voy a mascotas.js\r\n  }\r\n  })   \r\n  }\r\n\r\n  \r\n  \r\n  //53 aca creamos como nos dice la doc del mdbreact\r\n  const data = {\r\n    columns: [\r\n      {//Texto del th\r\n      label: \"Id\",\r\n      //nombre del campo del objeto, que debe coincidir\r\n      //en las rows\r\n      field: \"mascota_id\",\r\n      },                                          \r\n      {label: \"Nombre\",field: \"mascota_nombre\"},\r\n      {label: \"Raza\", field: \"mascota_raza\"},\r\n      {label: \"Colores\", field: \"mascota_colores\"},\r\n      {label: \"Tipo\", field:  \"mascota_tipo\"},\r\n      {label: \"Edad\", field:\"mascota_edad\"},\r\n      {label: \"Activo\", field:\"mascota_activo\"},   //aca comienza el video 45 agregando otra columna activo ps59\r\n      {label: \"Acciones\", field: \"acciones\"},\r\n    ],\r\n    rows: mascotas.map((m)=>{  //como en la doc. te pide algunos atrib. que sean iguales al field de arriba. pero como nuestra mascota es un arreglo de objetos con los mismos atributos del field. lo hacemos asi. y supongo que no impora el orden,si no que coincidan con el field\r\n     return{ //estamos retornado el objeto y con todo lo que tiene dentro osea...m y de paso le agregamos el acciones\r\n       ...m,\r\n       mascota_activo: <Toggle defaultChecked={m.mascota_activo} onChange={(e)=>{handleChangeToggle(e.target.checked,{...m})}}/>,  //pas59.1 60.1(aca coloco mi toggle y le coloco defaultchecked para que sea un comp. no controlado osea sin necesidad de hacer click, eso creo. tambien su valor que tiene por defecto osea en el momento que la hemos creado en el form),luego le coloco el onchange con la funcion handlec              // m.mascota_activo.toString(),  como mi mascota-activo es un booleano,no se muestra en la tabla. ca le igualo a su mismo valor pero que se muestre en string. luego instalamos npm i react-toggle(su pagina https://www.npmjs.com/package/react-toggle), ahora lo importamos\r\n       acciones: (<>\r\n                  <button className=\"btn btn-secondary mr-2\" onClick={()=>{setMascotaEditar({...m})}}>Editar</button>    \r\n                 <button className=\"btn btn-danger\" onClick={()=>{eliminarMascotaPorId(m.mascota_id);}}>Eliminar</button>\r\n                  </>)  //como estamos en un jsx , los elementos deben estar encerrados en un solo padre. creo que se pone eso cuando hay mas de un elemento.si quieres, que vayan dentro de un (). \r\n     }\r\n    })  \r\n    //ahora pasamos al mdbtable\r\n    //pas55.1 antes era solo rows: mascotas pero como quiero agregarle otro atributo lo mapeamos.y retornamos un objeto con todo lo que tenia dentro m pero le agregamos otro atributo llamado acciones(este coincide con nuestro field) y su valor va a ser 2 button\r\n  }\r\n  //pas56 vamos a crear un servicio para el boton eliminar ,vamos a mascota\r\n  \r\n  \r\n  //42agregamos tbody y mapeamos mascotas. el tostring lo pone como stringify. luego vamos al mascform\r\n  return (\r\n    <div className=\"row mt-4\">\r\n      <div className=\"col-12\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-body\">\r\n            <MDBDataTable striped responsive bordered hover data={data} className=\"text-center\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MascotasTabla;\r\n\r\n//pas51 borramos toda la tabla, para usar nuestro mdbreact\r\n//pas 54 le ponemos como prop nuestra data y le agregamos striped bordered. se agrega asi porque es booleano osea seria como stripped={true} (aca hablamos del mdbdatatable)\r\n//ps 55 agregamos otro label llamado acciones y field para agregar botones\r\n//ps 65 al dar click a mi boton editar, llamo a mi funcion setmascedi con su param. por seguridad el objeto con todo lo que tiene dentro.    devuelta al masc.js","import React, { useEffect, useState } from \"react\";\r\n//29 import  mascform\r\nimport MascotasForm from \"./MascotasForm\";\r\nimport MascotasTabla from \"./MascotasTabla\";\r\nimport { getMascotas } from \"./services/mascota\";\r\n\r\nconst Mascotas = () => {\r\n  //39 creamos una var. de estado, y como la data del backend lo recibimos como un [] de objetos ,creamos como valor inicial un []\r\n  const [mascotas, setMascotas] = useState([]);\r\n  \r\n  //40 llamo a mi getmascotas en una funcion async\r\n  const traerMascotas = async () => {\r\n    const data = await getMascotas();\r\n    setMascotas(data);\r\n  };\r\n//pas64 ahora quiero que cuando le doy en el boton editar haga su funcion, para eso creo una var. de estado. ahora como mii tabla es la que va editar ,le envio como prop el setmaed\r\nconst [mascotaEditar, setmascotaEditar] = useState(null); //creo que le pone null porque no sabe lo va a recibir\r\n//pas66 una vez hecho clic al boton editar, y como al setmascoedit le envie un objeto(osea m) , el nuevo valor de estado va a ser ese objeto. ahora con este nuevo valor de estado, le envio como prop al mascotaform\r\n\r\n  useEffect(()=>{       //41 usamos el useefect y mascotas lo pasamos como prop de mascotastabla\r\n      traerMascotas();\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      <MascotasForm traerMascotas={traerMascotas} mascotaEditar={mascotaEditar}/> \r\n      <MascotasTabla mascotas={mascotas} traerMascotas={traerMascotas} setMascotaEditar={setmascotaEditar}/>   \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Mascotas;\r\n\r\n//pas 47 despues de haber creado una mascota ,esta no aparece en mi tabla. para eso quiero ejecutar mi funcion traermascotas. \r\n//y lo enviamos como prop a mascotas form porque esta es encargada de crear la tabla. nota: por eso lo hemos creado en el padre. para que sus hijos lo usen para actualizar las mascotas\r\n\r\n//pas 49 https://mdbootstrap.com/docs/react/tables/datatables-1/ pagina de tabla  . ahora instalamos un module npm install mdbreact\r\n//pas 50 hacemos una copia de nuestra mascotastabla \r\n//pas58 ahora como quiero actualizar mi tabla despues de eliminar. le envio como prop el traermascota a mascota tabla","import React from 'react'\nimport Header from './components/Header'  //pas70.1 \nimport Mascotas from './mascotas/Mascotas'\n//pas28 eliminamos el import mascotasform y pegamos en el main mascotas\n\n\n\n\n//pas 15 nuestro antiguo form lo comento,lo de dentro de main e  importamos el formulariovalidacion y dentro de main su formulariovalidacion\n// import Formulario from './components/Formulario'\n// import FormularioValidacion from \"./components/FormularioValidacion\";\n//pas 21 comento mi formulario valid y lo de adentro de main. al main container le aumento un mt-4\n//pas22 creo un componente mascotasform\n//pas24 llamamos a mascotasform\nconst App = () => {\n  return (\n    <>   \n      <Header/>\n      <main className=\"container mt-4\">   \n      {/* <Formulario /> */}\n      {/* <FormularioValidacion/> */}\n      {/* <MascotasForm/> */}\n      <Mascotas/>\n      </main>\n    </>\n  )\n}\n\nexport default App\n\n//paso 1 entrar a la pg bootstrap copiar el cdn bootstrap css y pegarlo en el index de carp public. (en este caso pegue la ver 4.6, la 5 no dio)\n//paso 2 en nuestro index ,a nuestro body ponerlo como clas bg-light\n//pas3 creamos nuestro main y vamos al formulario\n\n//pas 71 en nuestra terminal ponemos npm run build.obligado se tiene que terminar el proceso antes de hacer esto","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}